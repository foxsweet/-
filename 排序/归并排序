/*
1.归并排序是稳定的排序算法：两个分块数组若比较值相同，则先取前边那个
2.归并排序的时间复杂度是O(NlogN)
3.归并排序的空间复杂度是O(N)，不是原地算法，需要大量内存空间
* 这个归并排序在排序的同时计算了整个数组的逆序度number
* */
public class Code01_MergeSort {
	public static void mergeSort(int[] arr) {
		if (arr == null || arr.length < 2) {
			return;
		}
		mergeSort(arr, 0, arr.length - 1);
	}

	public static void mergeSort(int[] arr, int l, int r) {
		if (l == r) {
			return;
		}
		int mid = l + ((r - l) >> 1);
		mergeSort(arr, l, mid);
		mergeSort(arr, mid + 1, r);
		merge(arr, l, mid, r);
	}

	//递归函数
	public static void merge(int[] arr, int l, int m, int r) {
		int[] help = new int[r - l + 1];
		int i = 0;
		int p1 = l;
		int p2 = m + 1;
		while (p1 <= m && p2 <= r) {
			help[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];
		}
		while (p1 <= m) {
			help[i++] = arr[p1++];
		}
		while (p2 <= r) {
			help[i++] = arr[p2++];
		}
		///写成l+i的形式是考虑到对数组的后半段进行拷贝回去
		for (i = 0; i < help.length; i++) {
			arr[l + i] = help[i];
		}
	}
}
